version: '3.8'

services:
  # Development Trading App Backend
  trading-app-dev:
    build:
      context: .
      target: builder
    container_name: trading-app-dev
    ports:
      - "3000:3000"
      - "9229:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres-dev
      - DB_PORT=5432
      - DB_USERNAME=trading_user
      - DB_PASSWORD=trading_password
      - DB_DATABASE=trading_app_dev
      - REDIS_HOST=redis-dev
      - REDIS_PORT=6379
      - KITE_API_KEY=${KITE_API_KEY}
      - KITE_API_SECRET=${KITE_API_SECRET}
      - KITE_ACCESS_TOKEN=${KITE_ACCESS_TOKEN}
      - JWT_SECRET=dev_jwt_secret
    depends_on:
      postgres-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - trading-dev-network
    volumes:
      - .:/app
      - /app/node_modules
    command: npm run start:debug

  # Development Postgres Database
  postgres-dev:
    image: postgres:15-alpine
    container_name: trading-postgres-dev
    environment:
      - POSTGRES_DB=trading_app_dev
      - POSTGRES_USER=trading_user
      - POSTGRES_PASSWORD=trading_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 20
    restart: unless-stopped
    networks:
      - trading-dev-network

  # Development Redis Cache
  redis-dev:
    image: redis:7-alpine
    container_name: trading-redis-dev
    ports:
      - "6380:6379"
    volumes:
      - redis_dev_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - trading-dev-network

  # Redis Commander (Redis GUI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    environment:
      - REDIS_HOSTS=local:redis-dev:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis-dev
    restart: unless-stopped
    networks:
      - trading-dev-network

  # pgAdmin (Postgres GUI)
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "8080:80"
    depends_on:
      - postgres-dev
    restart: unless-stopped
    networks:
      - trading-dev-network

volumes:
  postgres_dev_data:
  redis_dev_data:

networks:
  trading-dev-network:
    driver: bridge
