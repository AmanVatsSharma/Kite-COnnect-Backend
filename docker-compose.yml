version: '3.8'

services:
  # Trading App Backend
  trading-app:
    build: .
    container_name: trading-app-backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=trading_user
      - DB_PASSWORD=trading_password
      - DB_DATABASE=trading_app
      - DB_MIGRATIONS_RUN=${DB_MIGRATIONS_RUN:-true}
      - DB_SSL=${DB_SSL:-false}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KITE_API_KEY=${KITE_API_KEY}
      - KITE_API_SECRET=${KITE_API_SECRET}
      - KITE_ACCESS_TOKEN=${KITE_ACCESS_TOKEN}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - trading-network
    volumes:
      - ./logs:/app/logs

  # Postgres Database
  postgres:
    image: postgres:15-alpine
    container_name: trading-postgres
    environment:
      - POSTGRES_DB=trading_app
      - POSTGRES_USER=trading_user
      - POSTGRES_PASSWORD=trading_password
    # Do not publish in production; internal-only network access
    # ports:
    #   - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Optional: provide init SQL by mounting a file at runtime
      # - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 20
    restart: unless-stopped
    networks:
      - trading-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    # Do not publish in production; internal-only network access
    # ports:
    #   - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - trading-network

  # Nginx is recommended to run on the host (see DEPLOY_EC2.md)

volumes:
  postgres_data:
  redis_data:

networks:
  trading-network:
    driver: bridge
