version: '3.8'

# =============================================================================
# SSL/TLS Configuration Notes
# =============================================================================
# SSL terminates at Nginx on the EC2 host (not in Docker containers).
# Docker containers communicate internally over HTTP on the Docker network.
# 
# Architecture:
#   Internet (HTTPS:443) → Nginx on EC2 host → HTTP:3000 → Docker containers
#
# Benefits:
#   - SSL only configured once at Nginx level
#   - No SSL certificates needed in Docker
#   - No code changes required for WebSocket → WSS
#   - Easier certificate management and renewal
# =============================================================================

services:
  # Trading App Backend
  trading-app:
    build: .
    container_name: trading-app-backend
    # Expose port 3000 to host (for testing without Nginx)
    # In production, Nginx on host proxies to this port
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=trading_user
      - DB_PASSWORD=trading_password
      - DB_DATABASE=trading_app
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KITE_API_KEY=${KITE_API_KEY}
      - KITE_API_SECRET=${KITE_API_SECRET}
      - KITE_ACCESS_TOKEN=${KITE_ACCESS_TOKEN}
      - JWT_SECRET=${JWT_SECRET}
      - ADMIN_TOKEN=${ADMIN_TOKEN}
      - DATA_PROVIDER=${DATA_PROVIDER}
      - VORTEX_APP_ID=${VORTEX_APP_ID}
      - VORTEX_API_KEY=${VORTEX_API_KEY}
      - VORTEX_CREATE_SESSION_URL=${VORTEX_CREATE_SESSION_URL}
      - VORTEX_BASE_URL=${VORTEX_BASE_URL}
      - VORTEX_WS_URL=${VORTEX_WS_URL}
      - VORTEX_REDIRECT_URI=${VORTEX_REDIRECT_URI}
      - VORTEX_INSTRUMENTS_CSV_URL=${VORTEX_INSTRUMENTS_CSV_URL}
      - CORS_ORIGIN=${CORS_ORIGIN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - trading-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "dist/health-check.js"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Postgres Database
  postgres:
    image: postgres:15-alpine
    container_name: trading-postgres
    environment:
      - POSTGRES_DB=trading_app
      - POSTGRES_USER=trading_user
      - POSTGRES_PASSWORD=trading_password
    # Expose only to internal network, not host (security)
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 20
    restart: unless-stopped
    networks:
      - trading-network
    # Resource limits for production stability
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    # Expose only to internal network, not host (security)
    expose:
      - "6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - trading-network
    # Resource limits for production stability
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Search API (NestJS) - exposes only to host via 3002 for Nginx proxy
  search-api:
    build: ./services/search-api
    container_name: trading-search-api
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MEILI_HOST=http://meilisearch:7700
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY}
      - HYDRATION_BASE_URL=http://trading-app:3000
      - HYDRATION_API_KEY=${HYDRATION_API_KEY}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "3002:3000"
    depends_on:
      meilisearch:
        condition: service_started
      trading-app:
        condition: service_started
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Meilisearch (Search Engine) - internal only (no host port exposed)
  meilisearch:
    image: getmeili/meilisearch:v1.8
    container_name: trading-meilisearch
    environment:
      - MEILI_ENV=production
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY}
      - MEILI_NO_ANALYTICS=true
      - MEILI_MAX_INDEXING_MEMORY=1024Mb
    expose:
      - "7700"
    volumes:
      - meili_data:/meili_data
    restart: unless-stopped
    networks:
      - trading-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Search Indexer (read-only) - builds and syncs Meili index from Postgres
  search-indexer:
    build: ./services/search-indexer
    container_name: trading-search-indexer
    environment:
      - DB_HOST=${INDEXER_DB_HOST:-postgres}
      - DB_PORT=${INDEXER_DB_PORT:-5432}
      - DB_USERNAME=${INDEXER_DB_USER:-trading_user}
      - DB_PASSWORD=${INDEXER_DB_PASSWORD:-trading_password}
      - DB_DATABASE=${INDEXER_DB_NAME:-trading_app}
      - MEILI_HOST=http://meilisearch:7700
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY}
      - MEILI_INDEX=instruments_v1
      - INDEXER_MODE=backfill-and-watch
      - INDEXER_BATCH_SIZE=2000
      - INDEXER_POLL_SEC=300
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      postgres:
        condition: service_healthy
      meilisearch:
        condition: service_started
    restart: unless-stopped
    networks:
      - trading-network

volumes:
  postgres_data:
  redis_data:
  meili_data:

networks:
  trading-network:
    driver: bridge
