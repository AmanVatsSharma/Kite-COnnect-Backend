version: '3.8'

services:
  # Trading App Backend
  trading-app:
    build: .
    container_name: trading-app-backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=trading_user
      - DB_PASSWORD=trading_password
      - DB_DATABASE=trading_app
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KITE_API_KEY=${KITE_API_KEY}
      - KITE_API_SECRET=${KITE_API_SECRET}
      - KITE_ACCESS_TOKEN=${KITE_ACCESS_TOKEN}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - trading-network
    volumes:
      - ./logs:/app/logs

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: trading-mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=trading_app
      - MYSQL_USER=trading_user
      - MYSQL_PASSWORD=trading_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    restart: unless-stopped
    networks:
      - trading-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - trading-network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: trading-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - trading-app
    restart: unless-stopped
    networks:
      - trading-network

volumes:
  mysql_data:
  redis_data:

networks:
  trading-network:
    driver: bridge
