# Nginx configuration for Trading App Backend
# Production-ready reverse proxy with SSL support

# Rate limiting - prevent abuse
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=ws_limit:10m rate=5r/s;

# Upstream configuration for the NestJS app
upstream trading_app {
    server localhost:3000;
    keepalive 64;
}

# Upstream configuration for Search API (search microservice)
upstream search_api {
    server localhost:3002;
    keepalive 32;
}

# HTTP Server - Redirect to HTTPS and handle Let's Encrypt challenges
server {
    listen 80;
    listen [::]:80;
    server_name marketdata.vedpragya.com;

    # Let's Encrypt ACME challenge location
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri =404;
    }

    # Redirect all other HTTP traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS Server - Main application
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name marketdata.vedpragya.com;

    # SSL Certificate Configuration
    # These will be populated by Certbot during SSL setup
    ssl_certificate /etc/letsencrypt/live/marketdata.vedpragya.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/marketdata.vedpragya.com/privkey.pem;

    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_trusted_certificate /etc/letsencrypt/live/marketdata.vedpragya.com/chain.pem;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # Error handling for SSL
    # If certificate is not available, Nginx will fail to start
    # This is intentional to prevent serving without SSL
    # To check: sudo nginx -t

    # Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Logging
    access_log /var/log/nginx/trading_app_access.log;
    error_log /var/log/nginx/trading_app_error.log;

    # Client body size limit (for file uploads, if needed)
    client_max_body_size 10M;

    # Timeouts
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;

    # Socket.IO server path - Required for Socket.IO connections
    location /socket.io/ {
        # Rate limiting for WebSocket connections
        limit_req zone=ws_limit burst=10 nodelay;

        # WebSocket upgrade (critical for WSS functionality)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket timeouts (24 hours for long-lived connections)
        proxy_read_timeout 86400;
        proxy_send_timeout 86400;

        # Disable buffering for real-time streaming
        proxy_buffering off;

        # Error handling for WebSocket failures
        proxy_next_upstream error timeout http_502 http_503 http_504;
        proxy_next_upstream_tries 2;
        proxy_next_upstream_timeout 5s;

        proxy_pass http://trading_app;
    }

    # WebSocket endpoint - Market Data Gateway (Socket.IO)
    # Socket.IO with namespace /market-data - Recommended for most clients
    # Note: WebSockets automatically become WSS when served over HTTPS
    # No code changes needed in NestJS - SSL terminates at Nginx
    location /market-data {
        # Rate limiting for WebSocket connections
        limit_req zone=ws_limit burst=10 nodelay;

        # WebSocket upgrade (critical for WSS functionality)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;  # Important: ensures correct protocol
        
        # IMPORTANT: Preserve query parameters for API key
        proxy_pass http://trading_app;
        
        # WebSocket timeouts (24 hours for long-lived connections)
        proxy_read_timeout 86400;
        proxy_send_timeout 86400;

        # Disable buffering for real-time streaming
        proxy_buffering off;

        # Error handling for WebSocket failures
        proxy_next_upstream error timeout http_502 http_503 http_504;
        proxy_next_upstream_tries 2;
        proxy_next_upstream_timeout 5s;
    }

    # Native WebSocket endpoint (non-Socket.IO clients)
    # For clients using native WebSocket API (browser, Python websockets, etc.)
    # Supports standard WebSocket protocol without Socket.IO overhead
    location /ws {
        # Rate limiting for WebSocket connections
        limit_req zone=ws_limit burst=10 nodelay;

        # WebSocket upgrade headers (critical for WSS functionality)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # IMPORTANT: Preserve query parameters for API key authentication
        proxy_pass http://trading_app;
        
        # Long-lived connection timeouts (24 hours for persistent connections)
        proxy_read_timeout 86400;
        proxy_send_timeout 86400;
        
        # Disable buffering for real-time streaming
        proxy_buffering off;

        # Error handling for WebSocket failures
        proxy_next_upstream error timeout http_502 http_503 http_504;
        proxy_next_upstream_tries 2;
        proxy_next_upstream_timeout 5s;
    }

    # API endpoints - REST API
    location /api/ {
        # Rate limiting for API
        limit_req zone=api_limit burst=20 nodelay;

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Pass to NestJS app
        proxy_pass http://trading_app;

        # Caching (optional - adjust based on your needs)
        proxy_cache_bypass $http_upgrade;
    }

    # Search API endpoints
    location /api/search {
        # Rate limiting for Search
        limit_req zone=api_limit burst=30 nodelay;

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Pass to Search API
        proxy_pass http://search_api;

        # No buffering to reduce tail latency for small responses
        proxy_buffering off;
    }

    # Dashboard static files
    location /dashboard/ {
        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_pass http://trading_app;

        # Cache static assets
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }

    # Health check endpoint (no rate limiting)
    location /api/health {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_pass http://trading_app;
        access_log off;
    }

    # Metrics endpoint (no rate limiting)
    location /health/metrics {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_pass http://trading_app;
        access_log off;
    }

    # Swagger documentation
    location /api/docs {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_pass http://trading_app;
    }

    # Block direct access to internal Meilisearch (search engine)
    location /meili/ {
        return 403;
    }
    location /meilisearch/ {
        return 403;
    }

    # Default location - catch all
    location / {
        return 404;
    }

    # Error pages (optional, for better user experience)
    error_page 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
}


